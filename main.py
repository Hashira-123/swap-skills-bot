# bot.py ‚Äî –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Supabase

import requests  # üîΩ –ù—É–∂–Ω–æ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
import json
import logging
from telegram import Update
from telegram import ReplyKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, ContextTypes,
                          ConversationHandler, MessageHandler, filters)

# === –ù–ê–°–¢–†–û–ô–ö–ê ===
SUPABASE_URL = "https://jncwfxxvrglvtpwxxonm.supabase.co"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpuY3dmeHh2cmdsdnRwd3h4b25tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM4ODc5OTYsImV4cCI6MjA2OTQ2Mzk5Nn0.yMu5qwxNftjfKlO_ZE01hEAtp-PbVusJRaNOHuvS-EI"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π anon key
TABLE_NAME = "users"

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–≤—ã–∫–æ–≤
CATEGORIES = {
    "üíª IT –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": [
        "Python", "JavaScript", "HTML/CSS", "React", "Node.js", "SQL",
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    ],
    "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ": [
        "–†–∏—Å–æ–≤–∞–Ω–∏–µ", "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ú—É–∑—ã–∫–∞", "–ü–µ–Ω–∏–µ",
        "–ò–≥—Ä–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ", "–ü–∏—Å–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
    ],
    "üåç –Ø–∑—ã–∫–∏": [
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–ù–µ–º–µ—Ü–∫–∏–π", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "–ö–∏—Ç–∞–π—Å–∫–∏–π",
        "–Ø–ø–æ–Ω—Å–∫–∏–π"
    ],
    "üßò –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç":
    ["–ô–æ–≥–∞", "–ë–µ–≥", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–ü–ª–∞–≤–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"],
    "üìö –£—á–µ–±–∞ –∏ –Ω–∞—É–∫–∞":
    ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–•–∏–º–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–ò—Å—Ç–æ—Ä–∏—è"],
    "üíº –ë–∏–∑–Ω–µ—Å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ":
    ["–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ü—Ä–æ–¥–∞–∂–∏", "Public Speaking", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ"]
}

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫ –æ—Ç APScheduler) ===
logging.getLogger("apscheduler").setLevel(logging.WARNING)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
reply_keyboard = [['üìù –ü—Ä–æ—Ñ–∏–ª—å', 'üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—É'], ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']]
keyboard_markup = ReplyKeyboardMarkup(reply_keyboard,
                                      resize_keyboard=True,
                                      one_time_keyboard=False)

# === –û–ë–™–Ø–í–õ–Ø–ï–ú –°–¢–ê–¢–£–°–´ –î–ò–ê–õ–û–ì–ê ===
SHARE, LEARN, LOCATION = range(3)
# –≠—Ç–∞–ø—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
EDIT_MENU, EDIT_SHARE, EDIT_LEARN, EDIT_LOCATION = range(3, 7)
# === –û–ë–™–Ø–í–õ–Ø–ï–ú –°–¢–ê–¢–£–°–´ –î–õ–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
REG_SHARE, REG_LEARN, REG_LOCATION = range(100, 103)


# === –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user_id}",
            headers={"apikey": SUPABASE_KEY},
            params={"select": "id"})
        user_exists = response.status_code == 200 and len(response.json()) > 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        user_exists = False

    if user_exists:
        reply_markup = ReplyKeyboardMarkup(
            [['üìù –ü—Ä–æ—Ñ–∏–ª—å', 'üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—É'], ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']],
            resize_keyboard=True)
        await update.message.reply_text("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!",
                                        reply_markup=reply_markup)
    else:
        keyboard = [['‚ú® –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?",
                                        reply_markup=reply_markup)


async def start_registration_flow(update: Update,
                                  context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [[category] for category in CATEGORIES.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:",
        reply_markup=reply_markup)
    context.user_data['awaiting'] = 'share_category'
    return REG_SHARE


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üîÑ –ó–∞–ø—É—â–µ–Ω profile()")
    user_id = update.effective_user.id

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ Supabase
    try:
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user_id}",
            headers={"apikey": SUPABASE_KEY},
            params={"select": "share, learn, location"})
        if response.status_code == 200 and response.json():
            current = response.json()[0]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context.user_data
            context.user_data['share'] = current.get('share', '')
            context.user_data['learn'] = current.get('learn', '')
            context.user_data['location'] = current.get('location', '')
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º–∏
            context.user_data['share'] = ''
            context.user_data['learn'] = ''
            context.user_data['location'] = ''
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        context.user_data['share'] = ''
        context.user_data['learn'] = ''
        context.user_data['location'] = ''

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = [["üîß –£–º–µ—é"], ["üìö –•–æ—á—É —É—á–∏—Ç—å"], ["üìç –ú–µ—Å—Ç–æ"], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?\n\n"
        f"–°–µ–π—á–∞—Å:\n"
        f"–£–º–µ–µ—à—å: {context.user_data['share'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–•–æ—á–µ—à—å —É—á–∏—Ç—å: {context.user_data['learn'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ú–µ—Å—Ç–æ: {context.user_data['location'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}",
        reply_markup=reply_markup)
    return EDIT_MENU


# –®–∞–≥ 1: –ß—Ç–æ –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
async def share_skill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['share'] = update.message.text
    await update.message.reply_text("–ß–µ–º —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è?")
    return LEARN


# –®–∞–≥ 2: –ß–µ–º —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è
async def learn_skill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['learn'] = update.message.text
    await update.message.reply_text(
        "–ì–¥–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è? (–æ–Ω–ª–∞–π–Ω, –ú–æ—Å–∫–≤–∞, –°–ü–± –∏ —Ç.–¥.)")
    return LOCATION


# –®–∞–≥ 3: –õ–æ–∫–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
async def location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['location'] = update.message.text
    user = update.effective_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    context.user_data['name'] = user.full_name
    context.user_data['username'] = user.username or "–Ω–µ—Ç"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –≤—Å—ë –æ–∫
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! üéâ\n"
        f"–¢—ã —É–º–µ–µ—à—å: {context.user_data['share']}\n"
        f"–•–æ—á–µ—à—å —É—á–∏—Ç—å: {context.user_data['learn']}\n"
        f"–ú–µ—Å—Ç–æ: {context.user_data['location']}\n\n"
        f"–ò—â—É —Ç–µ–±–µ –ø–∞—Ä—É...")

    # === üîµ –ö–û–î –î–õ–Ø SUPABASE ‚Äî –í–°–¢–ê–í–¨ –°–Æ–î–ê ===

    headers = {
        "apikey": SUPABASE_KEY,
        "Authorization": f"Bearer {SUPABASE_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "telegram_id": update.effective_user.id,
        "name": user.full_name,
        "username": user.username or "",
        "share": context.user_data['share'],
        "learn": context.user_data['learn'],
        "location": context.user_data['location']
    }

    try:
        response = requests.post(f"{SUPABASE_URL}/rest/v1/{TABLE_NAME}",
                                 headers=headers,
                                 data=json.dumps(data))
        if response.status_code in [200, 201]:
            await update.message.reply_text(
                "‚úÖ –¢—ã –≤ –±–∞–∑–µ! –°–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é –ø–∞—Ä—É –¥–ª—è –æ–±–º–µ–Ω–∞.")
        else:
            print(
                f"‚ùå Supabase –æ—à–∏–±–∫–∞: {response.status_code}, {response.text}")
            await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.")
    # === –ö–û–ù–ï–¶ –ö–û–î–ê –î–õ–Ø SUPABASE ===

    return ConversationHandler.END


# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –î–õ–Ø –ù–û–í–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
async def reg_share_skill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    awaiting = context.user_data.get('awaiting')

    if awaiting == 'share_category' and user_input in CATEGORIES:
        skills = CATEGORIES[user_input]
        keyboard = [[skill] for skill in skills]
        keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏, —á–µ–º –∏–º–µ–Ω–Ω–æ –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:", reply_markup=reply_markup)
        context.user_data['awaiting'] = 'share_skill'
        return REG_SHARE

    elif awaiting == 'share_skill' and any(user_input in skills
                                           for skills in CATEGORIES.values()):
        context.user_data['share'] = user_input
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á–µ–º—É —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å:")
        keyboard = [[category] for category in CATEGORIES.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                        reply_markup=reply_markup)
        context.user_data['awaiting'] = 'learn_category'
        return REG_LEARN

    elif awaiting == 'share_skill' and user_input == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        keyboard = [[category] for category in CATEGORIES.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                        reply_markup=reply_markup)
        context.user_data['awaiting'] = 'share_category'
        return REG_SHARE

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return REG_SHARE


async def reg_learn_skill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    awaiting = context.user_data.get('awaiting')

    if awaiting == 'learn_category' and user_input in CATEGORIES:
        skills = CATEGORIES[user_input]
        keyboard = [[skill] for skill in skills]
        keyboard.append(["‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏, —á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è:", reply_markup=reply_markup)
        context.user_data['awaiting'] = 'learn_skill'
        return REG_LEARN

    elif awaiting == 'learn_skill' and any(user_input in skills
                                           for skills in CATEGORIES.values()):
        context.user_data['learn'] = user_input
        await update.message.reply_text(
            "–ì–¥–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è? (–æ–Ω–ª–∞–π–Ω, –ú–æ—Å–∫–≤–∞, –°–ü–± –∏ —Ç.–¥.)")
        return REG_LOCATION

    elif awaiting == 'learn_skill' and user_input == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        keyboard = [[category] for category in CATEGORIES.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                        reply_markup=reply_markup)
        context.user_data['awaiting'] = 'learn_category'
        return REG_LEARN

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return REG_LEARN


async def reg_location_handler(update: Update,
                               context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    user = update.effective_user

    # –ï—Å–ª–∏ "–ù–∞–∑–∞–¥"
    if user_input == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [[category] for category in CATEGORIES.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                        reply_markup=reply_markup)
        return REG_LEARN

    context.user_data['location'] = user_input

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
    data = {
        "telegram_id": user.id,
        "name": user.full_name,
        "username": user.username or "",
        "share": context.user_data['share'],
        "learn": context.user_data['learn'],
        "location": user_input
    }

    try:
        response = requests.post(f"{SUPABASE_URL}/rest/v1/{TABLE_NAME}",
                                 headers={
                                     "apikey": SUPABASE_KEY,
                                     "Authorization": f"Bearer {SUPABASE_KEY}",
                                     "Content-Type": "application/json"
                                 },
                                 json=data)
        if response.status_code in [200, 201]:
            await update.message.reply_text(
                "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ø–∞—Ä—É.")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    await view_profile(update, context)

    await update.message.reply_text(
        "üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ —É—Å–ø–µ—Ö–∞–º–∏: "
        "https://t.me/SwapSkills_News")
    return ConversationHandler.END


# === –ü–û–ò–°–ö –ü–ê–†–´ ===
async def find_match(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        "üîç –ò—â—É —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è –æ–±–º–µ–Ω–∞... –ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É!")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user.id}",
            headers={"apikey": SUPABASE_KEY},
            params={
                "select":
                "telegram_id, name, username, share, learn, location, matches"
            })
        if response.status_code != 200 or not response.json():
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return

        current_user = response.json()[0]
        matches = current_user.get("matches") or [
        ]  # –°–ø–∏—Å–æ–∫ ID, —Å –∫–µ–º —É–∂–µ –±—ã–ª –∫–æ–Ω—Ç–∞–∫—Ç

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/users",
            headers={"apikey": SUPABASE_KEY},
            params={
                "select": "telegram_id, name, username, share, learn, location"
            })
        if all_response.status_code != 200:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        all_users = all_response.json()

        # –§–∏–ª—å—Ç—Ä—É–µ–º: –Ω–µ —è, –Ω–µ –≤ —Å–ø–∏—Å–∫–µ matches, –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –Ω–∞–≤—ã–∫–∞–º
        candidates = [
            u for u in all_users if u['telegram_id'] != user.id
            and u['telegram_id'] not in matches and u['share'] and u['learn']
            and current_user['learn'].lower() in u['share'].lower()
            and current_user['share'].lower() in u['learn'].lower()
        ]

        if not candidates:
            await update.message.reply_text(
                "üòî –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
            return

        # –ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ (—á—Ç–æ–±—ã –±—ã–ª–æ —á–µ—Å—Ç–Ω–µ–µ)
        import random
        partner = random.choice(candidates)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text = (f"üéâ –Ø –Ω–∞—à—ë–ª(–∞) —Ç–µ–±–µ –ø–∞—Ä—É:\n"
                f"üë§ {partner['name']}\n"
                f"üîß –£–º–µ–µ—Ç: {partner['share']}\n"
                f"üìç –ú–µ—Å—Ç–æ: {partner['location']}\n"
                f"–ù–∞–ø–∏—à–∏ –µ–º—É(–µ–π): @{partner['username'] or '–Ω–µ—Ç'}")
        await update.message.reply_text(text)

        # üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ –æ–±–æ–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö
        headers = {"apikey": SUPABASE_KEY, "Content-Type": "application/json"}

        # –¢—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
        my_new_matches = list(set(matches + [partner['telegram_id']]))
        requests.patch(
            f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user.id}",
            headers=headers,
            json={"matches": my_new_matches})

        # –û–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–±—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        his_current = requests.get(
            f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{partner['telegram_id']}",
            headers={"apikey": SUPABASE_KEY})
        his_matches = his_current.json()[0].get(
            "matches", []) if his_current.status_code == 200 else []
        his_new_matches = list(set(his_matches + [user.id]))

        requests.patch(
            f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{partner['telegram_id']}",
            headers=headers,
            json={"matches": his_new_matches})

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def handle_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üìù –ü—Ä–æ—Ñ–∏–ª—å':
        await view_profile(update, context)


async def handle_find(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—É':
        await find_match(update, context)


async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await update.message.reply_text(
            "üí¨ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "1. –ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á–µ–º –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.\n"
            "2. –ù–∞–∂–º–∏ '–ù–∞–π—Ç–∏ –ø–∞—Ä—É' ‚Äî —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞.\n"
            "3. –ù–∞–ø–∏—à–∏ –µ–º—É(–µ–π) ‚Äî –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ–± –æ–±–º–µ–Ω–µ.\n\n"
            "üí° –ì–ª–∞–≤–Ω–æ–µ ‚Äî –æ—Ç–¥–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –∂–µ –≤—Ä–µ–º–µ–Ω–∏, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª(–∞).")


# –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
async def handle_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
        keyboard = [["üîß –£–º–µ—é"], ["üìö –•–æ—á—É —É—á–∏—Ç—å"], ["üìç –ú–µ—Å—Ç–æ"], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?",
                                        reply_markup=reply_markup)


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                                        reply_markup=keyboard_markup)


# === –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===
# –í—Å—Ç–∞–≤–ª—è–π –°–Æ–î–ê, –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π


async def edit_share_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß–µ–º —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?")
    return EDIT_SHARE


async def edit_learn_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ß–µ–º —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è?")
    return EDIT_LEARN


async def edit_location_start(update: Update,
                              context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–¥–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è?")
    return EDIT_LOCATION


async def edit_share_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['share'] = update.message.text
    await profile(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


async def edit_learn_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['learn'] = update.message.text
    await profile(update, context)


async def edit_location_save(update: Update,
                             context: ContextTypes.DEFAULT_TYPE):
    context.user_data['location'] = update.message.text
    await profile(update, context)


async def edit_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await view_profile(update, context)


async def view_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user_id}",
            headers={"apikey": SUPABASE_KEY},
            params={"select": "name, username, share, learn, location"})
        if response.status_code == 200 and response.json():
            user = response.json()[0]
            text = (f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                    f"üîß <b>–£–º–µ–µ—à—å:</b> {user['share']}\n"
                    f"üìö <b>–•–æ—á–µ—à—å —É—á–∏—Ç—å:</b> {user['learn']}\n"
                    f"üìç <b>–ú–µ—Å—Ç–æ:</b> {user['location']}\n"
                    f"üí¨ @{user['username'] or '–Ω–µ—Ç'}")
        else:
            text = ("‚ùå –¢—ã –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª(–∞) –ø—Ä–æ—Ñ–∏–ª—å.\n"
                    "–ù–∞–∂–º–∏ '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    # –ö–Ω–æ–ø–∫–∏: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / –ù–∞–∑–∞–¥
    keyboard = [["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"], ["‚óÄÔ∏è –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(text,
                                    reply_markup=reply_markup,
                                    parse_mode="HTML")


# === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
async def auto_find(context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/users?notified=eq.false",
            headers={"apikey": SUPABASE_KEY},
            params={
                "select": "telegram_id, name, username, share, learn, location"
            })
        if response.status_code != 200:
            return

        users = response.json()
        if not users:
            return  # –ù–µ—á–µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å

        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• (—á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –ø–∞—Ä—ã)
        all_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/users",
            headers={"apikey": SUPABASE_KEY},
            params={
                "select": "telegram_id, name, username, share, learn, location"
            })
        all_users = all_response.json(
        ) if all_response.status_code == 200 else []

        for user in users:
            try:
                # –ò—â–µ–º –ø–∞—Ä—É
                candidates = [
                    u for u in all_users
                    if u['telegram_id'] != user['telegram_id'] and u['share']
                    and u['learn']
                    and user['learn'].lower() in u['share'].lower()
                ]

                if candidates:
                    c = candidates[0]
                    await context.bot.send_message(
                        chat_id=user['telegram_id'],
                        text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n"
                        f"–Ø –Ω–∞—à—ë–ª(–∞) —Ç–µ–±–µ –ø–∞—Ä—É –¥–ª—è –æ–±–º–µ–Ω–∞:\n"
                        f"üë§ {c['name']}\n"
                        f"üîß –£–º–µ–µ—Ç: {c['share']}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {c['location']}\n\n"
                        f"–ù–∞–ø–∏—à–∏ –µ–º—É(–µ–π): @{c['username'] or '–Ω–µ—Ç'}\n\n"
                        f"üí¨ –î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ–± –æ–±–º–µ–Ω–µ!")
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user['name']}")

                    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–∏–ª–∏
                    requests.patch(
                        f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user['telegram_id']}",
                        headers={
                            "apikey": SUPABASE_KEY,
                            "Authorization": f"Bearer {SUPABASE_KEY}"
                        },
                        json={"notified": True})
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {user['name']}: {e}")
                continue

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø–æ–∏—Å–∫–∞: {e}")


async def notify_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        requests.patch(
            f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user_id}",
            headers={
                "apikey": SUPABASE_KEY,
                "Authorization": f"Bearer {SUPABASE_KEY}"
            },
            json={"notified": True}  # –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å
        )
        await update.message.reply_text(
            "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /find"
        )
    except:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


async def edit_share_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîß –£–º–µ—é':
        keyboard = [[category] for category in CATEGORIES.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:",
            reply_markup=reply_markup)
        context.user_data['awaiting'] = 'share_category'


async def edit_learn_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üìö –•–æ—á—É —É—á–∏—Ç—å':
        keyboard = [[category] for category in CATEGORIES.keys()]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å:",
            reply_markup=reply_markup)
        context.user_data['awaiting'] = 'learn_category'


async def edit_location_start(update: Update,
                              context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üìç –ú–µ—Å—Ç–æ':
        await update.message.reply_text(
            "–ì–¥–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –æ–±—â–∞—Ç—å—Å—è? (–æ–Ω–ª–∞–π–Ω, –ú–æ—Å–∫–≤–∞, –°–ü–± –∏ —Ç.–¥.)")
        context.user_data['awaiting'] = 'location'


async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º "‚úÖ –ì–æ—Ç–æ–≤–æ"
    if user_input == '‚úÖ –ì–æ—Ç–æ–≤–æ':
        await view_profile(update, context)
        return ConversationHandler.END

    awaiting = context.user_data.get('awaiting')

    if awaiting == 'share_category' and user_input in CATEGORIES:
        keyboard = [[skill] for skill in CATEGORIES[user_input]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏, —á–µ–º –∏–º–µ–Ω–Ω–æ –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:",
            reply_markup=reply_markup)
        context.user_data['awaiting'] = 'share_skill'
        context.user_data['temp_category'] = user_input

    elif awaiting == 'share_skill' and any(user_input in skills
                                           for skills in CATEGORIES.values()):
        context.user_data['share'] = user_input
        user_id = update.effective_user.id
        try:
            response = requests.patch(
                f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user_id}",
                headers={
                    "apikey": SUPABASE_KEY,
                    "Authorization": f"Bearer {SUPABASE_KEY}",
                    "Content-Type": "application/json"
                },
                json={"share": user_input})
            if response.status_code in [200, 204]:
                await update.message.reply_text(
                    f"‚úÖ –¢–µ–ø–µ—Ä—å —Ç—ã —É–º–µ–µ—à—å: {user_input}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        await view_profile(update, context)

    elif awaiting == 'learn_category' and user_input in CATEGORIES:
        keyboard = [[skill] for skill in CATEGORIES[user_input]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏, —á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è:",
            reply_markup=reply_markup)
        context.user_data['awaiting'] = 'learn_skill'
        context.user_data['temp_category'] = user_input

    elif awaiting == 'learn_skill' and any(user_input in skills
                                           for skills in CATEGORIES.values()):
        context.user_data['learn'] = user_input
        user_id = update.effective_user.id
        try:
            response = requests.patch(
                f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user_id}",
                headers={
                    "apikey": SUPABASE_KEY,
                    "Authorization": f"Bearer {SUPABASE_KEY}",
                    "Content-Type": "application/json"
                },
                json={"learn": user_input})
            if response.status_code in [200, 204]:
                await update.message.reply_text(
                    f"‚úÖ –¢–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å —É—á–∏—Ç—å: {user_input}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        await view_profile(update, context)

    elif awaiting == 'location':
        context.user_data['location'] = user_input
        user_id = update.effective_user.id
        try:
            response = requests.patch(
                f"{SUPABASE_URL}/rest/v1/users?telegram_id=eq.{user_id}",
                headers={
                    "apikey": SUPABASE_KEY,
                    "Authorization": f"Bearer {SUPABASE_KEY}",
                    "Content-Type": "application/json"
                },
                json={"location": user_input})
            if response.status_code in [200, 204]:
                await update.message.reply_text(
                    f"‚úÖ –ú–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {user_input}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        await view_profile(update, context)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")


registration_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex('^‚ú® –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å$'),
                       start_registration_flow)
    ],
    states={
        REG_SHARE:
        [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_share_skill)],
        REG_LEARN:
        [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_learn_skill)],
        REG_LOCATION: [
            MessageHandler(filters.TEXT & ~filters.COMMAND,
                           reg_location_handler)
        ],
    },
    fallbacks=[])

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("profile", profile)],
    states={
        EDIT_MENU: [
            MessageHandler(filters.Regex('^üîß –£–º–µ—é$'), edit_share_start),
            MessageHandler(filters.Regex('^üìö –•–æ—á—É —É—á–∏—Ç—å$'), edit_learn_start),
            MessageHandler(filters.Regex('^üìç –ú–µ—Å—Ç–æ$'), edit_location_start),
            MessageHandler(filters.Regex('^‚úÖ –ì–æ—Ç–æ–≤–æ$'), edit_done)
        ],
        EDIT_SHARE:
        [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_share_save)],
        EDIT_LEARN:
        [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_learn_save)],
        EDIT_LOCATION:
        [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_location_save)],
    },
    fallbacks=[])

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    TOKEN = "8455075824:AAGQAGZbaO-76QkDhj2Q6qFHSgW_dlvydmU"
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(registration_conv)  # –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö
    app.add_handler(conv_handler)  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app.add_handler(CommandHandler("find", find_match))
    app.add_handler(CommandHandler("notify_off", notify_off))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex('^üìù –ü—Ä–æ—Ñ–∏–ª—å$'),
                       handle_profile))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex('^üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—É$'),
                       handle_find))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex('^‚ÑπÔ∏è –ü–æ–º–æ—â—å$'),
                       handle_help))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex('^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å$'),
                       handle_edit))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex('^‚óÄÔ∏è –ù–∞–∑–∞–¥$'),
                       handle_back))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex('^üîß –£–º–µ—é$'),
                       edit_share_start))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex('^üìö –•–æ—á—É —É—á–∏—Ç—å$'),
                       edit_learn_start))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex('^üìç –ú–µ—Å—Ç–æ$'),
                       edit_location_start))
    app.add_handler(MessageHandler(filters.TEXT,
                                   handle_choice))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–≤—ã–∫–∞
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    from telegram.ext import ExtBot

    app.job_queue.run_repeating(
        auto_find, interval=86400, first=60
    )  # —Ä–∞–∑ –≤ –¥–µ–Ω—å  # —Ä–∞–∑ –≤ —á–∞—Å  # –∫–∞–∂–¥—ã–µ 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω), –Ω–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

    app.run_polling()
